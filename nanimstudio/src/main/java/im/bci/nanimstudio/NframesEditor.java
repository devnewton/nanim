/*
 * Copyright (c) 2013 devnewton <devnewton@bci.im>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the name of 'devnewton <devnewton@bci.im>' nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package im.bci.nanimstudio;

import im.bci.nanimstudio.model.Nframe;
import im.bci.nanimstudio.model.NanimStudioModel;
import im.bci.nanimstudio.model.Nanimation;
import im.bci.nanimstudio.tools.SwingSuxx;
import java.util.Collections;
import java.util.List;
/**
 *
 * @author bob
 */
public class NframesEditor extends javax.swing.JPanel {

    private Nanimation animation;
    private final NanimStudioModel nanimStudio;

    public Nanimation getAnimation() {
        return animation;
    }

    public void setAnimation(Nanimation animation) {
        Nanimation oldAnimation = this.animation;
        this.animation = animation;
        firePropertyChange("animation", oldAnimation, animation);
        firePropertyChange("frames", null, getFrames());
    }

    public List<Nframe> getFrames() {
        if (null != animation) {
            return Collections.unmodifiableList(animation.getFrames());
        } else {
            return Collections.emptyList();
        }
    }

    /**
     * Creates new form NanimationEditor
     */
    public NframesEditor() {
        nanimStudio = NanimStudioModel.getInstance();
        initComponents();
                SwingSuxx.setPreciseJSpinner(jSpinner_u1);
        SwingSuxx.setPreciseJSpinner(jSpinner_u2);
        SwingSuxx.setPreciseJSpinner(jSpinner_v1);
        SwingSuxx.setPreciseJSpinner(jSpinner_v2);   
        SwingSuxx.fixJspinner(jSpinner_duration);
        SwingSuxx.fixJspinner(jSpinner_u1);
        SwingSuxx.fixJspinner(jSpinner_u2);
        SwingSuxx.fixJspinner(jSpinner_v1);
        SwingSuxx.fixJspinner(jSpinner_v2);        
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        nanim = nanimStudio.getNanim();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_frames = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSpinner_duration = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jSpinner_u1 = new javax.swing.JSpinner();
        jSpinner_v1 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jSpinner_u2 = new javax.swing.JSpinner();
        jSpinner_v2 = new javax.swing.JSpinner();
        jComboBox_image = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        nframeViewer = new im.bci.nanimstudio.NframeViewer();

        setLayout(new java.awt.GridBagLayout());

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${frames}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jList_frames, "frame_list");
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${index}"));
        bindingGroup.addBinding(jListBinding);

        jScrollPane1.setViewportView(jList_frames);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 0.5;
        add(jScrollPane1, gridBagConstraints);

        jButton1.setText("add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(jButton1, gridBagConstraints);

        jButton2.setText("remove");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(jButton2, gridBagConstraints);

        jLabel1.setText("duration (ms):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(jLabel1, gridBagConstraints);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList_frames, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.duration}"), jSpinner_duration, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jSpinner_duration, gridBagConstraints);

        jLabel2.setText("(u1,v1):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(jLabel2, gridBagConstraints);

        jSpinner_u1.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.001f)));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList_frames, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.u1}"), jSpinner_u1, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jSpinner_u1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_u1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jSpinner_u1, gridBagConstraints);

        jSpinner_v1.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.001f)));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList_frames, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.v1}"), jSpinner_v1, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jSpinner_v1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_v1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jSpinner_v1, gridBagConstraints);

        jLabel3.setText("(u2,v2):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        add(jLabel3, gridBagConstraints);

        jSpinner_u2.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.001f)));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList_frames, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.u2}"), jSpinner_u2, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jSpinner_u2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_u2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jSpinner_u2, gridBagConstraints);

        jSpinner_v2.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.001f)));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList_frames, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.v2}"), jSpinner_v2, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jSpinner_v2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_v2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jSpinner_v2, gridBagConstraints);

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${images}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, nanim, eLProperty, jComboBox_image, "frame_combobox_images");
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList_frames, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nimage}"), jComboBox_image, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"), "frame_combobox_selected_image");
        bindingGroup.addBinding(binding);

        jComboBox_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_imageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jComboBox_image, gridBagConstraints);

        jLabel4.setText("image:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        add(jLabel4, gridBagConstraints);

        nframeViewer.setMaximumSize(new java.awt.Dimension(1100, 1100));
        nframeViewer.setMinimumSize(new java.awt.Dimension(200, 200));
        nframeViewer.setPreferredSize(new java.awt.Dimension(512, 512));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList_frames, org.jdesktop.beansbinding.ELProperty.create("${selectedElement}"), nframeViewer, org.jdesktop.beansbinding.BeanProperty.create("frame"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(nframeViewer, gridBagConstraints);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (null != animation) {
            Nframe frame = animation.addNewFrame();
            firePropertyChange("frames", null, getFrames());
            jList_frames.clearSelection();
            jList_frames.setSelectedValue(frame.getIndex(), true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (null != animation) {
            animation.removeFrames(jList_frames.getSelectedIndices());
            firePropertyChange("frames", null, getFrames());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jSpinner_v1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_v1StateChanged
        forceUpdateImage();
    }//GEN-LAST:event_jSpinner_v1StateChanged

    private void jSpinner_u1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_u1StateChanged
        forceUpdateImage();
    }//GEN-LAST:event_jSpinner_u1StateChanged

    private void jSpinner_u2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_u2StateChanged
        forceUpdateImage();
    }//GEN-LAST:event_jSpinner_u2StateChanged

    private void jSpinner_v2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_v2StateChanged
        forceUpdateImage();
    }//GEN-LAST:event_jSpinner_v2StateChanged

    private void jComboBox_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_imageActionPerformed
        forceUpdateImage();
    }//GEN-LAST:event_jComboBox_imageActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox_image;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList_frames;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_duration;
    private javax.swing.JSpinner jSpinner_u1;
    private javax.swing.JSpinner jSpinner_u2;
    private javax.swing.JSpinner jSpinner_v1;
    private javax.swing.JSpinner jSpinner_v2;
    private im.bci.nanimstudio.model.Nanim nanim;
    private im.bci.nanimstudio.NframeViewer nframeViewer;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void forceUpdateImage() {
        Object selected = jList_frames.getSelectedValue();
        jList_frames.clearSelection();
        jList_frames.setSelectedValue(selected, true);
    }
}
