/*
 * Copyright (c) 2013 devnewton <devnewton@bci.im>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the name of 'devnewton <devnewton@bci.im>' nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package im.bci.nanimstudio.tools;

import im.bci.NanimOpt;
import im.bci.binpacker.MultiBinPacker;
import im.bci.nanimstudio.model.NanimStudioModel;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author bob
 */
public class OptimizeDialog extends javax.swing.JDialog {
    
    private List<Dimension> possibleSizes = MultiBinPacker.createDefaultPossibleTextureDimensions();

    public List<Dimension> getPossibleSizes() {
        return possibleSizes;
    }
    
    private void addPossibleSize(Dimension dimension) {
        List<Dimension> oldPossibleSize = this.possibleSizes;
        this.possibleSizes = new ArrayList<Dimension>(possibleSizes);
        possibleSizes.add(dimension);
        firePropertyChange("possibleSizes", oldPossibleSize, Collections.unmodifiableList(possibleSizes));
    }

    public void removePossibleSize(int index) {
        List<Dimension> oldPossibleSize = this.possibleSizes;
        this.possibleSizes = new ArrayList<Dimension>(possibleSizes);
        possibleSizes.remove(index);
        firePropertyChange("possibleSizes", oldPossibleSize, Collections.unmodifiableList(possibleSizes));
    }

    /**
     * Creates new form OptimizeDialog
     */
    public OptimizeDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        SwingSuxx.fixJspinner(jSpinner_possibleWidth);
        SwingSuxx.fixJspinner(jSpinner_possibleHeight);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        nanim = NanimStudioModel.getInstance().getNanim();
        jButton_optimize = new javax.swing.JButton();
        jButton_cancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_possibleSizes = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jSpinner_possibleWidth = new javax.swing.JSpinner();
        jSpinner_possibleHeight = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton_add_new_size = new javax.swing.JButton();
        jButton_remove_selected_size = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jButton_optimize.setText("Optimize");
        jButton_optimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_optimizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(jButton_optimize, gridBagConstraints);

        jButton_cancel.setText("Cancel");
        jButton_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_cancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        getContentPane().add(jButton_cancel, gridBagConstraints);

        jList_possibleSizes.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList_possibleSizes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${possibleSizes}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jList_possibleSizes);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${height} x ${width}"));
        bindingGroup.addBinding(jListBinding);

        jScrollPane1.setViewportView(jList_possibleSizes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Possible sizes:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jLabel1, gridBagConstraints);

        jSpinner_possibleWidth.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jSpinner_possibleWidth, gridBagConstraints);

        jSpinner_possibleHeight.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jSpinner_possibleHeight, gridBagConstraints);

        jLabel2.setText("width:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("height:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        getContentPane().add(jLabel3, gridBagConstraints);

        jButton_add_new_size.setText("add new size");
        jButton_add_new_size.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_add_new_sizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jButton_add_new_size, gridBagConstraints);

        jButton_remove_selected_size.setText("remove selected size");
        jButton_remove_selected_size.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_remove_selected_sizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jButton_remove_selected_size, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_cancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton_cancelActionPerformed

    private void jButton_optimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_optimizeActionPerformed
        NanimOpt opt = new NanimOpt(nanim.buildProtobufNanim(), false, possibleSizes);
        nanim.loadProtobufNanim(opt.optimize());
        setVisible(false);
    }//GEN-LAST:event_jButton_optimizeActionPerformed

    private void jButton_remove_selected_sizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_remove_selected_sizeActionPerformed
        int index = jList_possibleSizes.getSelectedIndex();
        if(index >= 0) {
            removePossibleSize(index);
        }
    }//GEN-LAST:event_jButton_remove_selected_sizeActionPerformed

    private void jButton_add_new_sizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_add_new_sizeActionPerformed
        addPossibleSize(new Dimension((Integer)jSpinner_possibleWidth.getValue(), (Integer)jSpinner_possibleHeight.getValue()));
    }//GEN-LAST:event_jButton_add_new_sizeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_add_new_size;
    private javax.swing.JButton jButton_cancel;
    private javax.swing.JButton jButton_optimize;
    private javax.swing.JButton jButton_remove_selected_size;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList_possibleSizes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_possibleHeight;
    private javax.swing.JSpinner jSpinner_possibleWidth;
    private im.bci.nanimstudio.model.Nanim nanim;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables


}
